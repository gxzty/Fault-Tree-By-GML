<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oControl</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tree
globalvar root, nodeMap, countInput, countNode, maxNode, maxRank, bigOne, perHigh, longRank, unit, page, tempRank, thisRank, cutSet, tempCutSet, minCutSet, minPathSet;
cutSet = 0;
tempCutSet = 0;
minCutSet = 0;
minPathSet = 0;
global.page = 1;
global.root = 0;
global.countNode = 0;
global.nodeMap = ds_map_create();
global.longRank = 0;
global.maxNode = 0;
global.maxRank = 0;
global.unit = 0;
global.countInput = 0;
getcutset = false;
rootInput = get_string("Please Input Root: (Input 'END' To End, Current Inputed : 0)","ROOT[A]");
var test = string_copy(rootInput, 1, 5);
if (test != 'ROOT[') {
    show_message("Wrong Input! Restart...");
    game_restart();
    exit;
} else {
    global.root = instance_create(0,0,oNode);
    var rootData = string_copy(rootInput,6,string_pos(']', rootInput) - 6);
    scr_insertNode(root,rootData,NULL,NULL);
    countInput+=1;
    lastInput = get_string("Please Input Neture Language: (Input 'END' To End, Current Inputed : " + string(countInput) + ")","IF[B]AND[C]THEN[A]");
    
    while (lastInput != 'END'){
        if (scr_analyzeInput(lastInput)) {
            countInput++;
        }
        lastInput = get_string("Please Input Neture Language: (Input 'END' To End, Current Inputed : " + string(countInput) + ")","IF[B]AND[C]THEN[A]");
        
    }
}
tempRank[maxRank] = 0;
var i = 0;
while (i &lt;= maxRank) {
    countNode=0;
    var j = 0;
    with(oNode) {
        if (rank=i) {
            countNode++;
            thisRank[j++] = id;
        }
    }
    tempRank[i] = countNode;
    if (countNode &gt; maxNode) {
        maxNode = countNode;
        longRank=i;
    }
    i++;
}

bigOne = max(maxNode,maxRank);
perHigh = room_height/maxRank;
unit = room_width/bigOne;

//script7();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.page == 2) {
    var i = 0;
    var k = 0;
    draw_text(room_width/3,room_width/3,"Minimal Cut Sets:");
    while (i &lt; array_height_2d(minCutSet)) {
        var j = 0;
        var maxj = array_length_2d(minCutSet,i);
        var xx = 0;
        while (j &lt; maxj) {
            draw_text(room_width/2+xx*20,room_height/3+k*20,minCutSet[i,j].data);
            j++;
            xx++;
        }
        i++;
        k++;
    }
}


/*draw_text(room_width/2,room_height/2,string(array_height_2d(cutSet)) + "/" + string(array_length_2d(cutSet,0)) );
    //var mincut = 1;
    //if (mincut) {
        //cutSetHeight = array_height_2d(minCutSet);
                var i = 0;
        var k = 0;
        while (i &lt; array_height_2d(cutSet)) {
            var j = 0;
            var maxj = array_length_2d(cutSet,i);
            var xx = 0;
            while (j &lt; maxj) {
                draw_text(room_width/2-100+xx*10,room_height/2-100+k*20,cutSet[i,j].data);
                j++;
                xx++;
            }
            i++;
            k++;
       }
        var i = 0;
        var k = 0;
        while (i &lt; array_height_2d(tempCutSet)) {
            var j = 0;
            var maxj = array_length_2d(tempCutSet,i);
            var xx = 0;
            while (j &lt; maxj) {
                draw_text(room_width/2+100+xx*10,room_height/2+100+k*20,tempCutSet[i,j].data);
                j++;
                xx++;
            }
            i++;
            k++;
       }*/

    //} else {
        //cutSetHeight = array_height_2d(cutSet);

    // }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
